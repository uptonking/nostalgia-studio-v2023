{
  "git.path": "/usr/bin/git",
  "[markdown]": {
    "editor.acceptSuggestionOnEnter": "on",
    "editor.defaultFormatter": "mervin.markdown-formatter",
    "editor.formatOnSave": false,
    "editor.quickSuggestions": {
      "comments": true,
      "other": true,
      "strings": true
    },
    "editor.renderWhitespace": "all",
    "editor.snippetSuggestions": "top",
    "editor.tabCompletion": "on"
  },
  "bookmarks.saveBookmarksInProject": true,
  "editor.codeActionsOnSave": {
    "source.fixAll": "never",
    "source.organizeImports": "never",
    "source.sortMembers": "never"
  },
  "editor.formatOnSaveMode": "modificationsIfAvailable",
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    "*.js": "${capture}.test.js,${capture}.spec.js",
    "*.ts": "${capture}.test.ts,${capture}.spec.ts"
  },
  "files.autoSave": "onFocusChange",
  "maptz.regionfolder": {
    "[css]": {
      "defaultFoldStartRegex": "/\\*[\\s]*#region[\\s]+/folded(.*)",
      "foldEnd": "/* #endregion",
      "foldEndRegex": "/\\*[\\s]*#endregion(.*)",
      "foldStart": "/* #region [NAME]",
      "foldStartRegex": "/\\*[\\s]*#region[\\s]+(.*)"
    },
    "[html]": {
      "defaultFoldStartRegex": "\\<!--[\\s]*#region[\\s]+/folded[\\s]*(.*)",
      "foldEnd": "<!-- #endregion",
      "foldEndRegex": "\\<!--[\\s]*#endregion",
      "foldStart": "<!-- #region [NAME]",
      "foldStartRegex": "\\<!--[\\s]*#region[\\s]*(.*)"
    },
    "[javascript]": {
      "defaultFoldStartRegex": "//[\\s]*#region[\\s]+/folded[\\s]*(.*)",
      "foldEnd": "// #endregion",
      "foldEndRegex": "//[\\s]*#endregion(.*)",
      "foldStart": "// #region [NAME]",
      "foldStartRegex": "//[\\s]*#region[\\s]+(.*)"
    },
    "[javascriptreact]": {
      "defaultFoldStartRegex": "//[\\s]*#region[\\s]+/folded[\\s]*(.*)",
      "foldEnd": "// #endregion",
      "foldEndRegex": "//[\\s]*#endregion(.*)",
      "foldStart": "// #region [NAME]",
      "foldStartRegex": "//[\\s]*#region[\\s]+(.*)"
    },
    "[markdown]": {
      "defaultFoldStartRegex": "\\<!--[\\s]*#region[\\s]+/folded[\\s]*(.*)",
      "foldEnd": "<!-- #endregion",
      "foldEndRegex": "\\<!--[\\s]*#endregion",
      "foldStart": "<!-- #region [NAME]",
      "foldStartRegex": "\\<!--[\\s]*#region[\\s]*(.*)"
    },
    "[scss]": {
      "defaultFoldStartRegex": "/\\*[\\s]*#region[\\s]+/folded(.*)",
      "foldEnd": "/* #endregion",
      "foldEndRegex": "/\\*[\\s]*#endregion(.*)",
      "foldStart": "/* #region [NAME]",
      "foldStartRegex": "/\\*[\\s]*#region[\\s]+(.*)"
    },
    "[typescript]": {
      "defaultFoldStartRegex": "//[\\s]*#region[\\s]+/folded[\\s]*(.*)",
      "foldEnd": "// #endregion",
      "foldEndRegex": "//[\\s]*#endregion(.*)",
      "foldStart": "// #region [NAME]",
      "foldStartRegex": "//[\\s]*#region[\\s]+(.*)"
    },
    "[typescriptreact]": {
      "defaultFoldStartRegex": "//[\\s]*#region[\\s]+/folded[\\s]*(.*)",
      "foldEnd": "// #endregion",
      "foldEndRegex": "//[\\s]*#endregion(.*)",
      "foldStart": "// #region [NAME]",
      "foldStartRegex": "//[\\s]*#region[\\s]+(.*)"
    }
  },
  "markdownFormatter.codeAreaToBlock": "",
  "markdownFormatter.enable": true,
  "markdownFormatter.formatCodes": true,
  "markdownFormatter.formatOpt": {
    "brace_style": "collapse,preserve-inline",
    "e4x": true,
    "indent_size": 2,
    "indent_with_tabs": false,
    "space_after_anon_function": false,
    "space_after_named_function": false
  },
  "markdownFormatter.formatULSymbol": false,
  "markdownFormatter.fullWidthTurnHalfWidth": "auto",
  "tsImportSorter.configuration.autoFormat": "onSave",
  "typescript.tsdk": "node_modules/typescript/lib",
  "vue.features.codeActions.enable": false
}
